f
e<-f[11:13]
e
f[11:13]
f[11:14]
f[10:14]
f[1]
e<-f[1-3]
e
e<-f[1-3]
e
f[1-3]
f[1:3]
e<-f[1:3]
e
x<- c(1, 2, 3)
y<-c(4,5,8)
x
y
z<-c(x,y)
z
z[c(1, 3, 5)]
z[c(1, 3, 6)]
d<-z[c(1, 3, 6)]
d
d[d>3]
d[d>1]
d[d=1]
d[d=3]
d[d==3]
d[d==4]
d[-2]
length <- 46.25
length
length <- length * 5
length
length <- length + 16^0.5
length
friend<-c("amin", "mobin", "danial", "kurosh", "kasra", "arash")
friend
friend[-2]
friend[1:3]
friend[1:2]
gun_violence <- data.frame(
state =c("AL","AK", "AZ"),
Mortality_Rate=c(16.7, 13.3, 11.3),
ownership_rate=c(0.48, 0.61, 0.34)
)
gun_violence
gun_violance <- rbind(gun_violance, data.frame(state="CT", mortality_rate=4.9,ownership_rate=0.112))
gun_violence <- rbind(gun_violence, data.frame(state="CT", mortality_rate=4.9,ownership_rate=0.112))
View(gun_violence)
gun_violence <- rbind(gun_violence, data.frame(state="CT", Mortality_Rate=4.9,ownership_rate=0.112))
View(gun_violence)
View(gun_violence)
gun_violence <- rbind(gun_violence, data.frame(state="DD", Mortality_Rate=5.0, owenrship_rate=0.333))
View(gun_violence)
View(gun_violence)
gun_violence <- rbind(gun_violence, data.frame(state="DD", Mortality_Rate=5.0, owenership_rate=0.333))
gun_violence <- rbind(gun_violence, data.frame(state="DD", Mortality_Rate=5.0, ownership_rate=0.333))
View(gun_violence)
View(gun_violence)
View(occupancy_data)
occupancy_data$Occupancy2 <- ifelse(Occupancy_data$Occupancy==1,"YES","NO")
occupancy_data <- read.table('datatraining.txt', sep = ",");
names(occupancy_data);
head(occupancy_data);
tail(occupancy_data);
summary(occupancy_data);
str(occupancy_data);
tem <- occupancy_data$Temperature
hum <- occupancy_data$Humidity
lit <- occupancy_data$Light
co2 <- occupancy_data$CO2
plot(tem, hum)
occupancy_data$Occupancy2 <- ifelse(Occupancy_data$Occupancy==1,"YES","NO")
qplot(tem, hum, data= occupancy_data, colour= occupancy_data$Occupancy)
install.packages("ggplot2")
library(ggplot2)
View(occupancy_data)
library(RMySQL)
library(dbConnect)
library(party)
library(ggplot2)
library(psych)
con = dbConnect(MySQL(), user='root', password='root', dbname='jobWizard', host='localhost',unix.sock="/Applications/MAMP/tmp/mysql/mysql.sock")
dbListTables(con)
str(con)
query <- "SELECT * FROM company"
str(con)
query <- "SELECT * FROM company"
result <- dbGetQuery(con, query)
str(result)
result <- as.data.frame(result)
typeof(result)
result$industry
result$industry != 'Other'
result[result$industry != 'Other']
a <- a[which(result$industry != 'Other'),]
a <- result[which(result$industry != 'Other'),]
View(a)
sectors <- result[which(result$industry != 'Other'),]
sectors <- result$industry
as.data.frame(sectors)
sectors <- as.data.frame(sectors)
View(sectors)
sectors <- result[which(result$industry != 'Other'),]
result[which(result$industry != 'Other'),]
sectors <- result[which(result$industry == 'Other'),]
sectors <- result$industry
sectors <- as.data.frame(sectors)
View(sectors)
sectors <- subset(result,industry != 'Other')
sectors <- result$industry
sectors <- as.data.frame(sectors)
sectors <- subset(result,industry != 'Other')
subset(result,industry != 'Other')
sectors <- subset(result,industry != 'Other')
sectors <- result$industry
sectors <- as.data.frame(sectors)
View(sectors)
View(result)
sectors <- subset(result,industry %in% 'Other')
sectors <- result$industry
sectors <- as.data.frame(sectors)
View(sectors)
result <- dbGetQuery(con, query)
str(result)
result <- as.data.frame(result)
typeof(result)
sectors <- subset(result,industry %in% 'Other')
sectors <- result$industry
sectors <- as.data.frame(sectors)
View(sectors)
sectors <- subset(result,result$industry %in% 'Other')
subset(result,result$industry %in% 'Other')
result$industry[!grep("other", result$industry)]
result$industry[!grep("Other", result$industry)]
result[!grep("Other", result$industry)]
result$industry[!grepl("Other", result$industry)]
sectors <- result$industry[!grepl("Other", result$industry)]
sectors <- result$industry
sectors <- as.data.frame(sectors)
View(sectors)
sectors <- result$industry[!grepl("Other", result$industry)]
result$industry[!grepl("Other", result$industry)]
sectors <- result$industry[!grepl("Other", result$industry)]
sectors <- as.data.frame(sectors)
View(sectors)
View(sectors)
sectors <- result$industry[!grepl("Other", result$industry)]
# unique first column
sectors <- unique( sectors[ ,1] )
sectors <- as.data.frame(sectors)
sectors <- result$industry[!grepl("Other", result$industry)]
sectors <- as.data.frame(sectors)
# unique first column
sectors <- unique( sectors[ ,1] )
sectors <- as.data.frame(sectors)
# unique first column
sectors[!duplicated(1), ]
sectors <- result$industry[!grepl("Other", result$industry)]
# unique first column
sectors[!duplicated(1), ]
sectors <- result$industry[!grepl("Other", result$industry)]
# unique first column
sectors[!duplicated(1), ]
sectors <- as.data.frame(sectors)
# unique first column
sectors[!duplicated(1), ]
# unique first column
sectors <- sectors[!duplicated(1), ]
sectors <- as.data.frame(sectors)
View(sectors)
sectors <- result$industry[!grepl("Other", result$industry)]
# unique first column
sectors <- unique( sectors[ ,1] )
sectors <- result$industry[!grepl("Other", result$industry)]
sectors <- as.data.frame(sectors)
# unique first column
sectors <- unique( sectors[ ,1] )
sectors <- as.data.frame(sectors)
qplot(result, sectors)
qplot(result$county, sectors)
qplot(result$county, sectors[[1]])
sectors[[1]]
result$county
county <- unique( sectors[ ,1] )
View(result)
county <- unique( result[ ,5] )
# unique first column
sectors <- unique( sectors[ ,1] )
county <- unique( result[ ,5] )
sectors <- as.data.frame(sectors)
qplot(county, sectors[[1]])
county <- as.data.frame(county)
qplot(county[[1]], sectors[[1]])
# unique first column
result$newsec <- unique( sectors[ ,1] )
histogram(result$county, sectors[[1]])
hist(result$county, sectors[[1]])
hist(sum(result$company_id), result$county)
city <- unique( result[ ,5] )
city <- as.data.frame(city)
View(city)
city <- unique( result[ ,5] )
result[ ,5]
city <- result$town
View(result)
city <- result$town
city <- unique( city[[1]])
city <- as.data.frame(city)
View(city)
city <- result$town
city <- as.data.frame(city)
city <- unique( city[[1]])
sectors <- unique( city[ ,1] )
city <- result$town
sectors <- unique( city[ ,1] )
city <- result$town
city <- as.data.frame(city)
sectors <- unique( city[ ,1] )
city <- result$town
city <- as.data.frame(city)
View(city)
hist(result$town, unique( result$industry[!grepl("Other", result$industry) ))
result$industry = sectors
result$industry == sectors
result[result$industry == sectors]
result[,result$industry == sectors]
query <- "SELECT DISTINCT industry FROM company"
result <- dbGetQuery(con, query)
result <- as.data.frame(result)
typeof(result)
View(result)
query <- "SELECT * FROM company"
industry <- "SELECT DISTINCT industry FROM company"
result <- dbGetQuery(con, query)
industry <- dbGetQuery(con, industry)
str(result)
result <- as.data.frame(result)
View(industry)
View(industry)
t <- paste("select * from company where industry = ", industry, ";",sep="")
t <- dbGetQuery(con, t)
con = dbConnect(MySQL(), user='root', password='root', dbname='jobWizard', host='localhost',unix.sock="/Applications/MAMP/tmp/mysql/mysql.sock")
dbListTables(con)
t <- paste("select * from company where industry = ", industry, ";",sep="")
t <- dbGetQuery(con, t)
t
t <- paste("select * from company where industry = ", c("Other"), ";",sep="")
t <- dbGetQuery(con, t)
query <- "SELECT * FROM company"
industry <- "SELECT DISTINCT industry FROM company"
t <- paste("select * from company where industry = ", industry, ";",sep="")
t <- dbGetQuery(con, t)
t
t <- paste("select * from SELECT DISTINCT industry FROM company")
t <- "select * from SELECT DISTINCT industry FROM company"
t
t <- dbGetQuery(con, t)
t <- "select * from (SELECT DISTINCT industry FROM company)"
t
result <- dbGetQuery(con, query)
industry <- dbGetQuery(con, industry)
t <- dbGetQuery(con, t)
industry-company <- "select * from company where `industry` in (SELECT DISTINCT `industry` FROM company)"
industryCompany <- "select * from company where `industry` in (SELECT DISTINCT `industry` FROM company)"
industryCompany <- dbGetQuery(con, industryCompany)
industryCompany <- "select * from company where `industry` in (SELECT DISTINCT `industry` FROM company)"
industryCompany <- "select * from company where `industry` in (SELECT DISTINCT `industry` FROM company where `industry != `Other`)"
industryCompany <- dbGetQuery(con, industryCompany)
industryCompany <- dbGetQuery(con, industryCompany)
industryCompany <- "select * from company where `industry` in (SELECT DISTINCT `industry` FROM company WHERE industry !='Other')"
industryCompany <- "select * from company where `industry` in (SELECT DISTINCT `industry` FROM company WHERE industry !='Other');"
industryCompany <- dbGetQuery(con, industryCompany)
View(industryCompany)
#sectors <- result$industry[!grepl("Other", result$industry)]
#sectors <- as.data.frame(sectors)
# unique first column
#sectors <- unique( sectors[ ,1] )
#sectors <- as.data.frame(sectors)
hist(result$industry)
#sectors <- result$industry[!grepl("Other", result$industry)]
#sectors <- as.data.frame(sectors)
# unique first column
#sectors <- unique( sectors[ ,1] )
#sectors <- as.data.frame(sectors)
hist(sum(result)
#sectors <- result$industry[!grepl("Other", result$industry)]
#sectors <- as.data.frame(sectors)
# unique first column
#sectors <- unique( sectors[ ,1] )
#sectors <- as.data.frame(sectors)
hist(sum(result))
#sectors <- result$industry[!grepl("Other", result$industry)]
#sectors <- as.data.frame(sectors)
# unique first column
#sectors <- unique( sectors[ ,1] )
#sectors <- as.data.frame(sectors)
hist(sum(result))
industryCompany <- "select * from company where `industry` in (SELECT DISTINCT `industry` FROM company WHERE industry !='Other');"
industryCompany <- dbGetQuery(con, industryCompany)
industryCompany <- as.data.frame(industryCompany)
View(industryCompany)
#sectors <- result$industry[!grepl("Other", result$industry)]
#sectors <- as.data.frame(sectors)
# unique first column
#sectors <- unique( sectors[ ,1] )
#sectors <- as.data.frame(sectors)
hist(sum(result$company_id), result$industry)
#sectors <- result$industry[!grepl("Other", result$industry)]
#sectors <- as.data.frame(sectors)
# unique first column
#sectors <- unique( sectors[ ,1] )
#sectors <- as.data.frame(sectors)
qplot(sum(result$company_id), result$industry)
#sectors <- result$industry[!grepl("Other", result$industry)]
#sectors <- as.data.frame(sectors)
# unique first column
#sectors <- unique( sectors[ ,1] )
#sectors <- as.data.frame(sectors)
qplot(result$industry,sum(result$company_id))
#sectors <- result$industry[!grepl("Other", result$industry)]
#sectors <- as.data.frame(sectors)
# unique first column
#sectors <- unique( sectors[ ,1] )
#sectors <- as.data.frame(sectors)
pairs.panels(result)
r <- industryCompany
dbWriteTable(con, "R",r,overwrite=TRUE, append=FALSE)
setwd("/Applications/MAMP/htdocs/Dissertation")
library("pdftools")
library("stringr")
library("tm")
library("dplyr")
company_house <- read.csv('Company_House/company_detail.csv', header=T)
#download.file("https://www.gov.uk/government/uploads/system/uploads/attachment_data/file/682406/2018-02-19_Tier_2_5_Register_of_Sponsors.pdf","./2018-02-19_Tier_2_5_Register_of_Sponsors.pdf")
rawText <- pdf_text("./2018-02-19_Tier_2_5_Register_of_Sponsors.pdf")
doc <- strsplit(rawText, "\n")
head(splitedByLineText)
head(doc)
header_row <- grep("^No. of Sponsors on Register Licensed under Tiers 2 and 5:", doc[[1]])
header_row
doc[[1]]
#header removal
doc[[1]] <- doc[[1]][(header_row + 1):length(doc[[1]])]
head(doc)
tail(doc)
length(doc)
#footer removal
footer_row_1 <- grep("Summary", doc[[1909]])
footer_row_2 <- grep("Total Number of Sponsors registered under Tiers 2 and 5",doc[[1909]])
footer_row_1
footer_row_2
doc[[1909]] <- doc[[1909]][-c(footer_row_1:footer_row_2)]
head(doc)
tail(doc)
length(doc[[1]])
tier2 <- 0
tier2 <- data.frame(tier2)
for (i in 1:length(doc)){
for (j in 1:length(doc[[i]]))
{
tier2 <- c(tier2,strsplit(doc[[i]][j], "   ")[[1]][1])
}
}
backup <- tier2
temp<- 0
temp <- data.frame(temp)
for(o in 1:length(tier2)){
temp <- rbind(temp,tier2[[o]])
}
temp<- 0
for (i in length(tier2):1){
if( (str_detect(tier2[[i]], "  Organisation Name")) || (str_detect(tier2[[i]], "^ $")) || (str_detect(tier2[[i]], "^0$")) || (str_detect(tier2[[i]], "^$")) || (str_detect(tier2[[i]], " Organisation Name"))  ){
tier2[[i]] <- NULL
}
}
temp<- 0
temp <- data.frame(temp)
for(o in 1:length(tier2)){
temp <- rbind(temp,tier2[[o]])
}
temp[[1]]
temp[1]
temp[,1]
temp[1,]
temp[1,] <- NULL
temp[1,]
temp[1,] <- NULL
typeof(temp)
temp[1,]
temp[1]
head(temp[1])
temp[[1]][1]
temp[[1]][1] <- NULL
typeof(temp[[1]][1])
temp[[1]][1] <- ""
typeof(temp[[1]][1])
temp[[1]][1]
temp[[1]][1] <- NULL
temp <- as.data.frame(temp)
typeof(temp)
temp[[1]][1]
temp[[1]][1] <- NULL
ooo <- temp
ooo <- ooo[c(-1),]
ooo <- data.frame(ooo[c(-1),])
ooo <- temp
ooo <- data.frame(ooo[c(-1),])
View(ooo)
temp <- data.frame(temp[c(-1),])
x<- 0
x <- data.frame(x)
x <- rbind(x,temp)
x <- rbind(x,tier2)
tier2CompanyList <- temp
library(RMySQL)
library(dbConnect)
temp
library(RMySQL)
library(dbConnect)
con = dbConnect(MySQL(), user='root', password='root', dbname='jobWizard', host='localhost',unix.sock="/Applications/MAMP/tmp/mysql/mysql.sock")
dbListTables(con)
typeof(temp)
#overwrite also creates the table from scratch
dbWriteTable(con, "R",r,overwrite=TRUE, append=TRUE)
#overwrite also creates the table from scratch
dbWriteTable(con, "R",tier2CompanyList,overwrite=TRUE, append=TRUE)
#overwrite also creates the table from scratch
dbWriteTable(con, "R",tier2CompanyList,overwrite=FALSE, append=TRUE)
#overwrite also creates the table from scratch
dbWriteTable(con, "R",tier2CompanyList,overwrite=FALSE, append=TRUE)
View(tier2CompanyList)
tier2CompanyList$company_name <- tier2CompanyList$temp.c..1....
View(tier2CompanyList)
tier2CompanyList$temp.c..1....<- NULL
View(tier2CompanyList)
dbWriteTable(con, "R",tier2CompanyList,overwrite=FALSE, append=TRUE)
dbWriteTable(con, "R",tier2CompanyList,overwrite=FALSE, append=TRUE)
dbWriteTable(con, "R", tier2CompanyList,overwrite=FALSE, append=TRUE, row.names = FALSE,  field.types = NULL)
dbWriteTable(con, "R", tier2CompanyList,overwrite=FALSE, append=TRUE, row.names = FALSE,  field.types = NULL)
dbWriteTable(con, "R", tier2CompanyList,overwrite=TRUE, append=FALSE, row.names = FALSE,  field.types = NULL)
dbWriteTable(con, "R", tier2CompanyList,overwrite=TRUE, append=FALSE, row.names = FALSE,  field.types = NULL)
dbWriteTable(con, "R", tier2CompanyList,overwrite=FALSE, append=FALSE, row.names = TRUE,  field.types = NULL)
query <- "insert into R (company_name) select company_name from company where not EXISTS( select R.company_name from R where R.company_name = company.company_name) LIMIT 1"
result <- dbGetQuery(con, query)
query <- "select company_name from R"
result <- dbGetQuery(con, query)
query <- "select company_name from company"
result <- dbGetQuery(con, query)
result == tier2CompanyList
all.equal(result,tier2CompanyList)
isTRUE(all.equal(result,tier2CompanyList))
if(isTRUE(all.equal(result,tier2CompanyList))){
print("Hi")
}
if(isTRUE(all.equal(result,tier2CompanyList)) == TRUE){
print("Hi")
}
if(isTRUE(all.equal(result,tier2CompanyList) == TRUE){
if( isTRUE(all.equal(result,tier2CompanyList) == TRUE){
if (  TRUE){
print("Hi")
}
if ( (isTRUE(all.equal(result,tier2CompanyList)) == TRUE){
if ( (isTRUE(all.equal(result,tier2CompanyList)) == TRUE ) {
if ( (isTRUE(all.equal(result,tier2CompanyList)) ) {
if ( (isTRUE(all.equal(result,tier2CompanyList)) == TRUE )) {
print("Hi")
}
if ( (isTRUE(all.equal(result,tier2CompanyList))  ) {
)
if ( isTRUE(all.equal(result,tier2CompanyList))  ) {
print("Hi")
}
if ( isTRUE(all.equal(result,tier2CompanyList)) == TRUE ) {
print("Hi")
}
if(TRUE){
print(R)
}
print("R")
if(TRUE){
print("R")
}
if(1 == 1){
print("R")
}
if(1 == TRUE){
print("R")
}
if(isTRUE(TRUE) == TRUE){
print("R")
}
if ( isTRUE(all.equal(result,tier2CompanyList)) != TRUE ) {
print("Hi")
}
if ( isTRUE(all.equal(result,tier2CompanyList)) != TRUE ) {
}else{
print("It is updated")
}
if ( isTRUE(all.equal(result,tier2CompanyList)) != TRUE ) {
}else{
print("It is updated")
}
if ( isTRUE(all.equal(result,tier2CompanyList)) == TRUE ) {
}else{
print("It is updated")
}
print("HI")
